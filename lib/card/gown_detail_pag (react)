// ignore_for_file: use_build_context_synchronously, sort_child_properties_last

import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:gown_rental/pages/AddToCartPage.dart';
import 'package:gown_rental/card/reserve.dart';
import 'package:video_player/video_player.dart';

class GownDetailPage extends StatefulWidget {
  final String imageUrl;
  final String gownName;
  final String gownType;
  final String gownSize;
  final String gownReservationPrice;
  final String gownQty;
  final int gownLowRentalRate;
  final int gownHighRentalRate;
  final String gownColor;
  final String gownStyle;
  final String gownDescription;
  final int gownID;
  final int rentalFee;

  const GownDetailPage({
    super.key,
    required this.imageUrl,
    required this.gownName,
    required this.gownType,
    required this.gownSize,
    required this.gownReservationPrice,
    required this.gownQty,
    required this.gownLowRentalRate,
    required this.gownHighRentalRate,
    required this.gownColor,
    required this.gownStyle,
    required this.gownDescription,
    required this.gownID,
    required this.rentalFee,
  });

  @override
  _GownDetailPageState createState() => _GownDetailPageState();
}

class _GownDetailPageState extends State<GownDetailPage> {
  int _selectedQty = 1;

// Add a local map to track user reactions
  Map<int, bool> _userReactions = {};

  Stream<List<Map<String, dynamic>>> _fetchReviewsStream(String gownName) {
    return Supabase.instance.client
        .from('reviews')
        .stream(primaryKey: ['review_id'])
        .eq('gownName', gownName)
        .map((data) => List<Map<String, dynamic>>.from(data));
  }

  Future<void> _addToCart(BuildContext context) async {
    final user = Supabase.instance.client.auth.currentUser;
    if (user == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please log in to add items to the cart')),
      );
      return;
    }

    try {
      final response = await Supabase.instance.client.from('AddToCart').insert({
        'gownID': widget.gownID,
        'userId': user.id,
        'gownName': widget.gownName,
        'color': widget.gownColor,
        'type': widget.gownType,
        'size': widget.gownSize,
        'reservationPrice': int.parse(widget.gownReservationPrice),
        'qty': _selectedQty,
        'style': widget.gownStyle,
        'rentalFee': widget.rentalFee,
        'total': (int.parse(widget.gownReservationPrice) * _selectedQty).toString(),
        'imageUrl': widget.imageUrl,
      });

      if (response.error != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to add item to cart: ${response.error!.message}')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Item added to cart')),
        );

        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const AddToCartPage()),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Item added to cart!')),
      );
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => const AddToCartPage()),
      );
    }
  }

  void _goToReservePage(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ReservePage(
          imageUrl: widget.imageUrl,
          gownName: widget.gownName,
          gownreservationPrice: int.parse(widget.gownReservationPrice),
          gownQty: _selectedQty,
          gownType: widget.gownType,
          gownColor: widget.gownColor,
          gownSize: widget.gownSize,
          gownStyle: widget.gownStyle,
          gownID: widget.gownID,
          rentalFee: widget.rentalFee,
        ),
      ),
    );
  }

 void _toggleHeart(int reviewId, bool isHearted) async {
    try {
      final userId = Supabase.instance.client.auth.currentUser?.id;
      if (userId == null) {
        print('Error: User not authenticated.');
        return;
      }

      // Fetch the current react count
      final response = await Supabase.instance.client
          .from('reviews')
          .select('react')
          .eq('review_id', reviewId)
          .maybeSingle();

      if (response == null) {
        print('Error: Review not found.');
        return;
      }

      final data = response as Map<String, dynamic>?; 
      final currentReactCount = data?['react'] as int? ?? 0;

      // Check if the user has already reacted
      final reactionCheckResponse = await Supabase.instance.client
          .from('user_reactions')
          .select('reacted')
          .eq('id', userId)
          .eq('review_id', reviewId)
          .maybeSingle();

      final hasReacted = reactionCheckResponse != null;

      // Determine new react count
      final newReactCount = hasReacted ? currentReactCount - 1 : currentReactCount + 1;

      // Update the review's react count
      await Supabase.instance.client
          .from('reviews')
          .update({'react': newReactCount})
          .eq('review_id', reviewId);

      if (hasReacted) {
        // Remove the user's reaction
        await Supabase.instance.client
            .from('user_reactions')
            .delete()
            .eq('id', userId)
            .eq('review_id', reviewId);
      } else {
        // Add the user's reaction
        await Supabase.instance.client
            .from('user_reactions')
            .insert({'id': userId, 'review_id': reviewId, 'reacted': true});
      }

      // Update local state
      setState(() {
        _userReactions[reviewId] = !isHearted; // Toggle the local reaction state
      });

      print('Review updated successfully');
    } catch (e) {
      print('Exception: $e');
    }
  }
  
  void _increaseQty() {
    if (_selectedQty < int.parse(widget.gownQty)) {
      setState(() {
        _selectedQty++;
      });
    }
  }

  void _decreaseQty() {
    if (_selectedQty > 1) {
      setState(() {
        _selectedQty--;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: <Widget>[
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Center(
                    child: SizedBox(
                      width: 800,
                      height: 450,
                      child: Container(
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: _getColorFromGownColor(widget.gownColor),
                            width: 1,
                          ),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: Image.network(
                            widget.imageUrl,
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 26),
                  Text(
                    widget.gownName,
                    style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                  ),
                  Text(
                    '${widget.gownQty} available',
                    style: const TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: Colors.grey),
                  ),
                  const SizedBox(height: 10),
                  Row(
                    children: [
                      IconButton(
                        icon: const Icon(Icons.remove),
                        onPressed: _decreaseQty,
                      ),
                      Text(
                        '$_selectedQty',
                        style: const TextStyle(fontSize: 18),
                      ),
                      IconButton(
                        icon: const Icon(Icons.add),
                        onPressed: _increaseQty,
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Text(
                    '₱${widget.gownLowRentalRate.toStringAsFixed(2)} - ₱${widget.gownHighRentalRate.toStringAsFixed(2)}',
                    style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 18),
                  _buildDetailText('', widget.gownDescription, context, textAlign: TextAlign.justify),
                  const SizedBox(height: 26),
                  Container(
                    padding: const EdgeInsets.all(20.0),
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey),
                      borderRadius: BorderRadius.circular(10.0),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _buildDetailText('Type: ', widget.gownType, context),
                        const SizedBox(height: 10),
                        _buildDetailText('Size: ', widget.gownSize, context),
                        const SizedBox(height: 10),
                        _buildDetailText('Reservation Price: ', '₱${int.parse(widget.gownReservationPrice)}.00', context),
                        const SizedBox(height: 10),
                        _buildDetailText('Color: ', widget.gownColor, context),
                        const SizedBox(height: 10),
                        _buildDetailText('Style: ', widget.gownStyle, context),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
          const Text(
                    'Reviews',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),
                  StreamBuilder<List<Map<String, dynamic>>>(
                    stream: _fetchReviewsStream(widget.gownName),
                    builder: (context, snapshot) {
                      if (snapshot.connectionState == ConnectionState.waiting) {
                        return const CircularProgressIndicator();
                      } else if (snapshot.hasError) {
                        return Text('Error: ${snapshot.error}');
                      } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                        return const Text('No reviews available');
                      } else {
                        return Column(
                          children: snapshot.data!.map((review) {
                            final avatarUrl = review['avatarUrl'] as String?;
                            final reviewId = review['review_id'] as int;
                            final isHearted = _userReactions[reviewId] ?? false; // Use local state
                            final reactCount = review['react'] as int? ?? 0;

                            return ListTile(
                              contentPadding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
                              leading: GestureDetector(
                                onTap: () {
                                  if (avatarUrl != null) {
                                    _showImage(context, avatarUrl);
                                  }
                                },
                                child: CircleAvatar(
                                  backgroundImage: avatarUrl != null ? NetworkImage(avatarUrl) : null,
                                  radius: 22,
                                  child: avatarUrl == null ? const Icon(Icons.person, size: 30) : null,
                                ),
                              ),
                              title: Row(
                                children: [
                                  Expanded(
                                    child: Text(
                                      review['username'] ?? 'Anonymous',
                                      style: const TextStyle(fontWeight: FontWeight.bold),
                                    ),
                                  ),
                                  IconButton(
                                    icon: Row(
                                      children: [
                                        Icon(
                                          isHearted ? Icons.favorite : Icons.favorite_border,
                                          color: isHearted ? Colors.red : null,
                                        ),
                                        const SizedBox(width: 5),
                                        Text(
                                          reactCount.toString(),
                                          style: TextStyle(
                                            color: isHearted ? const Color.fromARGB(255, 100, 90, 90) : null,
                                          ),
                                        ),
                                      ],
                                    ),
                                    onPressed: () {
                                      _toggleHeart(reviewId, isHearted);
                                    },
                                  ),
                                ],
                              ),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(review['reviews'] ?? 'No review text'),
                          const SizedBox(height: 8),
                          Row(
                            children: [
                              if (review['imageUrl'] != null)
                                GestureDetector(
                                  onTap: () {
                                    _showFullScreenImage(context, review['imageUrl']);
                                  },
                                  child: Image.network(
                                    review['imageUrl'],
                                    width: 80,
                                    height: 80,
                                    fit: BoxFit.cover,
                                  ),
                                ),
                                const SizedBox(width: 10),
                              if (review['videoUrl'] != null)
                                GestureDetector(
                                  onTap: () {
                                    _showFullScreenVideo(context, review['videoUrl']);
                                  },
                                  child: Container(
                                    width: 110,
                                    height: 85,
                                    color: Colors.black12,
                                    child: const Center(
                                      child: Icon(Icons.play_circle_outline, size: 50),
                                    ),
                                  ),
                                ),
                            ],
                          ),
                        ],
                      ),
                    );
                  }).toList(),
                );
              }
            },
          )
        ],
      ),
    ),
  ),

Container(
  padding: const EdgeInsets.all(16.0),
  decoration: BoxDecoration(
    color: Theme.of(context).bottomAppBarColor,
    boxShadow: [
      BoxShadow(
        color: Colors.black.withOpacity(0.1),
        blurRadius: 10.0,
        ),
      ],
    ),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        ElevatedButton(
          onPressed: () {
            _addToCart(context);
          },
          child: const Icon(Icons.shopping_cart),
          style: ElevatedButton.styleFrom(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10.0),
              ),
              padding: const EdgeInsets.all(16.0),
              minimumSize: const Size(50, 50),
              ),
            ),
            
            ElevatedButton(
              onPressed: () {
                _goToReservePage(context);
                },
                style: ElevatedButton.styleFrom(
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10.0),
                    ),
                    minimumSize: const Size(250, 50),
                    ),
                    child: const Text('Reserve'),
                  ),
                ],
              ),
            ),
          ],
        ),
      );
    }

void _showFullScreenVideo(BuildContext context, String videoUrl) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
       return Dialog(
        child: Container(
          color: Colors.black,
          child: Center(
            child: VideoPlayerWidget(videoUrl: videoUrl),
            ),
          ),
        );
      },
    );
  }

void _showFullScreenImage(BuildContext context, String imageUrl) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return Dialog(
        child: Container(
          color: Colors.black,
          child: Center(
            child: InteractiveViewer(
              child: Image.network(imageUrl),
            ),
          ),
        ),
      );
    },
  );
}

void _showImage(BuildContext context, String avatarUrl) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return Dialog(
        child: Container(
          color: Colors.black,
          child: Center(
            child: InteractiveViewer(
              child: Image.network(avatarUrl),
              ),
            ),
         ),
      );
    },
  );
}

Widget _buildDetailText(String title, String value, BuildContext context, {TextAlign textAlign = TextAlign.left}) {
  final isDarkMode = Theme.of(context).brightness == Brightness.dark;
  
  return RichText(
    textAlign: textAlign,
    text: TextSpan(
      children: [
        TextSpan(
          text: title,
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: isDarkMode ? Colors.white : Colors.black,
            ),
          ),
          TextSpan(text: value,
          style: TextStyle(
            color: isDarkMode ? Colors.white : Colors.black,
            ),
          ),
        ],
     ),
  );
}
Color _getColorFromGownColor(String gownColor) {
  switch (gownColor.toLowerCase()) {
    case 'red':
      return Colors.red;
    case 'blue':
      return Colors.blue;
    case 'green':
      return Colors.green;
    case 'yellow':
      return Colors.yellow;
    case 'black':
      return Colors.black;
    case 'white':
      return Colors.white;
    case 'pink':
      return Colors.pink;
    case 'purple':
      return Colors.purple;
    case 'orange':
      return Colors.orange;
    default:
      return Colors.grey;
       }
    }
}
                        
class VideoPlayerWidget extends StatefulWidget {
    final String videoUrl;
    const VideoPlayerWidget({Key? key, required this.videoUrl}) : super(key: key);

@override
  _VideoPlayerWidgetState createState() => _VideoPlayerWidgetState();
   }                

 class _VideoPlayerWidgetState extends State<VideoPlayerWidget> {
 late VideoPlayerController _controller;

  @override
  void initState() {
  super.initState();
    _controller = VideoPlayerController.network(widget.videoUrl)
      ..initialize().then((_) {
      setState(() {}); // Ensure the first frame is shown after the video is initialized
      _controller.play();
        });
          }

@override
void dispose() {
   _controller.dispose();
   super.dispose();
    }

@override
Widget build(BuildContext context) {
  return _controller.value.isInitialized
  ? AspectRatio(
    aspectRatio: _controller.value.aspectRatio,
    child: VideoPlayer(_controller),
    )
    : const Center(child: CircularProgressIndicator());
    }
}